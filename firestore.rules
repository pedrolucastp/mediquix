rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Validate string length and content
    function isValidString(str, minLen, maxLen) {
      return str is string 
        && str.size() >= minLen 
        && str.size() <= maxLen 
        && str.matches('^[\\S ]*$');
    }

    // Validate specialty number
    function isValidSpecialty(s) {
      return s is number && s >= -1 && s < 30;
    }

    // Validate word object
    function isValidWord(word) {
      return word.keys().hasAll(['word', 'clue', 'difficulty', 'specialties'])
        && isValidString(word.word, 1, 50)
        && isValidString(word.clue, 3, 500)
        && word.difficulty is number
        && word.difficulty >= 1
        && word.difficulty <= 3
        && word.specialties is list
        && word.specialties.size() > 0
        && word.specialties.size() <= 5;
    }

    /**
     * @function validateUserWrite
     * @param {map} data - User document data for write operations
     * @param {bool} isCreate - Whether this is a create operation
     * @returns {bool} True if user data is valid for write
     */
    function validateUserWrite(data, isCreate) {
      return (!isCreate || data.keys().hasAll(['username', 'email']))
        && (!('username' in data) || isValidString(data.username, 3, 30))
        && (!('email' in data) || (isValidString(data.email, 5, 100) && data.email.matches('^[^@]+@[^@]+\\.[^@]+$')))
        && (!('default_difficulty' in data) || 
            ((data.default_difficulty == -1) || 
             (data.default_difficulty >= 1 && data.default_difficulty <= 3)))
        && (!('default_speciality' in data) || 
            ((data.default_speciality == -1) || 
             (data.default_speciality >= 0 && data.default_speciality < 30)))
        && (!('custom_vocabulary' in data) || 
            (data.custom_vocabulary is list && 
             data.custom_vocabulary.size() <= 1500))
        && (!('isPremium' in data) || data.isPremium is bool)
        && (!('points' in data) || (data.points is number && data.points >= 0))
        && (!('freePoints' in data) || (data.freePoints is number && data.freePoints >= 0))
        && (!('lastFreePointsUpdate' in data) || data.lastFreePointsUpdate is timestamp)
        && (!('premiumActivatedAt' in data) || data.premiumActivatedAt is timestamp);
    }

    /**
     * @function validatePointsMutation
     * @param {map} request - The request.resource.data
     * @param {map} resource - The resource.data
     * @returns {bool} True if points/freePoints mutation is valid (atomic, small delta)
     */
    function validatePointsMutation(request, resource) {
      return (!('points' in request && 'points' in resource) || 
              (request.points == resource.points || abs(request.points - resource.points) <= 100))
        && (!('freePoints' in request && 'freePoints' in resource) || 
            (request.freePoints == resource.freePoints || abs(request.freePoints - resource.freePoints) <= 100));
    }

    // Allow users to read and write only their own data
    match /users/{userId} {
      // Allow read if authenticated and it's their own data
      allow read: if request.auth != null 
                  && request.auth.uid == userId;
      
      // Allow create with validation
      allow create: if request.auth != null 
                   && request.auth.uid == userId
                   && validateUserWrite(request.resource.data, true);
      
      // Allow update with validation
      allow update: if request.auth != null 
                    && request.auth.uid == userId
                    && validateUserWrite(request.resource.data, false)
                    && validatePointsMutation(request.resource.data, resource.data);
      
      // Allow delete of own data
      allow delete: if request.auth != null 
                    && request.auth.uid == userId;
    }

    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}