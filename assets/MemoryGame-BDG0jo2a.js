import{u as a,G as e}from"./GameContainer-DfY2muwH.js";import{_ as l,s as t,u as o,w as s,c as u,l as n,h as r,e as i,g as v,m as d,p as c,n as p,k as m,r as f,a as h,d as g,f as w,t as _,F as b,j as C,q as k}from"./index-Bfo6PRYR.js";import{u as G}from"./SelectorsComponent-BHgr9fBZ.js";import{u as y}from"./useGameState-VT9cnjiQ.js";const j={class:"card-front"},T={class:"card-back"},I=l({__name:"GameCardFlip",props:{flipped:{type:Boolean,default:!1},matched:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},emits:["click"],setup(a,{emit:e}){const l=a,f=e,h=t(l.flipped),g=t(l.matched),w=o(),_=t(w.isDarkMode);s((()=>l.flipped),(a=>{h.value=a}),{flush:"post"}),s((()=>l.matched),(a=>{g.value=a}),{flush:"post"});const b=u((()=>({flipped:h.value,matched:g.value,dark:_.value}))),C=u((()=>({transform:g.value?"scale(0.95)":void 0,willChange:h.value?"transform":void 0}))),k=u((()=>({transform:h.value?"rotateY(180deg)":void 0})));return(e,l)=>{const t=n("font-awesome-icon");return i(),r("div",{class:m(["card",b.value]),style:p(C.value),onClick:l[0]||(l[0]=e=>!a.disabled&&f("click"))},[v("div",{class:"card-inner",style:p(k.value)},[v("div",j,[d(e.$slots,"front",{},(()=>[c(t,{icon:["fas","question"],size:"2x"})]))]),v("div",T,[d(e.$slots,"back",{},void 0)])],4)],6)}}},[["__scopeId","data-v-843b71fd"]]),M={class:"game-settings"},O={class:"setting-group"},P=["value"],E={class:"setting-description"},S={class:"game-content"},N={id:"definition"},F={id:"game-board"},x=l({__name:"MemoryGame",setup(l){const t=f(!1),o=G(),{POINTS_CONFIG:s,awardPoints:u}=a(),{endGame:n,resetGame:d}=y(),c=f(0),p=f(0),m=f(0),j=f([]),T=f(null),x=f([]),D=f([]),$=f(0),q=f(null),z=f(null),B=f(null),R=f([]),A=f(2),U=f(8),J=f(140);function L(a){U.value=parseInt(a.target.value),Q()}function Q(){d(),c.value=0,p.value=0,m.value=0,j.value=[],R.value=[],x.value=[],A.value=2;let a=o.words.filter((a=>a.isActive));if(a.length<2)return void alert("Não há palavras suficientes para iniciar o jogo. Por favor, ajuste os filtros.");a.sort((()=>Math.random()-.5)),x.value=a.slice(0,U.value),D.value=[...x.value],V();const e=[...x.value,...x.value].map((a=>({word:a.word,flipped:!1,matched:!1})));e.sort((()=>Math.random()-.5)),j.value=e}function V(){0===D.value.length?T.value=null:(D.value.sort((()=>Math.random()-.5)),T.value=D.value.pop())}function W(){const a=j.value[q.value],e=j.value[z.value];if(2===A.value)a.word===T.value.word&&e.word===T.value.word?(a.matched=!0,e.matched=!0,R.value.push(a,e),H(),R.value.length===j.value.length?K():setTimeout((()=>{V()}),500)):setTimeout((()=>{Y()}),1e3);else{const l=j.value[B.value],t=T.value.word;let o=0;a.word===t&&o++,e.word===t&&o++,l.word===t&&o++,o>=2?([a,e,l].forEach((a=>{a.word===t&&(a.matched=!0)})),R.value.push(...[a,e,l].filter((a=>a.word===t))),H(),A.value=2,R.value.length===j.value.length?K():setTimeout((()=>{V()}),500)):setTimeout((()=>{Y(),A.value=2}),1e3)}}function Y(){null!==q.value&&(j.value[q.value].flipped=!1),null!==z.value&&(j.value[z.value].flipped=!1),null!==B.value&&(j.value[B.value].flipped=!1),H()}function H(){$.value=0,q.value=null,z.value=null,B.value=null}async function K(){n();const a=function(){const a=R.value.length/2*s.WORD_FOUND,e=p.value===R.value.length;return a+s.GAME_COMPLETION+(e?s.PERFECT_SCORE:0)}();await u(a),m.value=a,setTimeout((()=>{alert(`Parabéns! Você encontrou todos os pares em ${p.value} tentativas.\nPontos ganhos: ${a}`),Q()}),500)}return h((()=>{Q()})),(a,l)=>(i(),g(e,{title:"Jogo da Memória",gameInstructions:"Encontre os pares de palavras correspondentes!\n- Clique em uma carta para revelar a palavra\n- Combine a palavra com sua definição mostrada acima\n- Ganhe 2 pontos por cada par encontrado\n- Ganhe 10 pontos por completar o jogo\n- Ganhe 15 pontos de bônus por terminar sem erros\n- Use o perk 'hint' (5 pts) para revelar um par de cartas\n- O perk 'open_third_card' (6 pts) permite abrir três cartas simultaneamente",loading:t.value,score:c.value,availablePerks:["hint","open_third_card"],onSpecialtyChange:Q,onDifficultyChange:Q},{"game-settings":w((()=>[v("div",M,[l[1]||(l[1]=v("h3",null,"Configurações",-1)),v("div",O,[l[0]||(l[0]=v("label",null,"Número de pares",-1)),v("input",{type:"range",value:U.value,min:"8",max:"40",step:"4",onInput:L},null,40,P),v("p",E,"Quantidade de pares de palavras no jogo ("+_(U.value)+" pares)",1)])])])),default:w((()=>[v("div",S,[v("p",N,_(T.value?T.value.clue:"Todas as palavras foram encontradas!"),1),v("div",F,[(i(!0),r(b,null,C(j.value,((a,e)=>(i(),g(I,{key:e,flipped:a.flipped,matched:a.matched,disabled:$.value>=A.value,cardSize:J.value,onClick:a=>function(a){const e=j.value[a];e.flipped||e.matched||(e.flipped=!0,p.value++,0===$.value?(q.value=a,$.value=1):1===$.value?(z.value=a,$.value=2,2===A.value&&W()):2===$.value&&3===A.value&&(B.value=a,$.value=3,W()))}(e)},{back:w((()=>[k(_(a.word),1)])),_:2},1032,["flipped","matched","disabled","cardSize","onClick"])))),128))])])])),_:1},8,["loading","score"]))}},[["__scopeId","data-v-4214b8b8"]]);export{x as default};
//# sourceMappingURL=MemoryGame-BDG0jo2a.js.map
