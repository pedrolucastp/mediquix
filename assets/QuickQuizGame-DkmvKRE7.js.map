{"version":3,"file":"QuickQuizGame-DkmvKRE7.js","sources":["../../src/views/QuickQuizGame.vue","../../src/composables/useGameTimer.js"],"sourcesContent":["<template>\n  <GameContainer\n    title=\"Quiz Rápido\"\n    :gameInstructions=\"gameInstructions\"\n    :loading=\"loading\"\n    :score=\"score\"\n    :availablePerks=\"['skip', 'extra_time']\"\n    @specialty-change=\"startQuiz\"\n    @difficulty-change=\"startQuiz\"\n  >\n    <div class=\"game-content\">\n      <template v-if=\"!currentQuestion\">\n        <div class=\"score-container\">\n          <p>Total de pontos: {{ score }}</p>\n          <p>Palavras restantes: {{ remainingQuestions }}</p>\n        </div>\n      </template>\n\n      <template v-else>\n        <div class=\"progress-bar\">\n          <div class=\"timer\" :style=\"{ width: `${timePercentage}%` }\"></div>\n        </div>\n\n        <div class=\"word-display\">\n          <h2>{{ currentQuestion.clue }}</h2>\n        </div>\n\n        <div class=\"options-container\">\n          <button \n            v-for=\"option in currentQuestionOptions\" \n            :key=\"option\"\n            class=\"option-button\"\n            :class=\"{ \n              'selected': userAnswer === option,\n              'correct': isAnswered && !timeExpired && option === currentQuestion.word,\n              'incorrect': isAnswered && !timeExpired && userAnswer === option && option !== currentQuestion.word,\n              'timeout-correct': timeExpired && option === currentQuestion.word,\n              'timeout-incorrect': timeExpired && option !== currentQuestion.word\n            }\"\n            @click=\"selectAnswer(option)\"\n            :disabled=\"isAnswered || timeExpired\"\n          >\n            {{ option }}\n          </button>\n        </div>\n\n        <div class=\"feedback-container\" v-if=\"isAnswered || timeExpired\">\n          <p :class=\"{ 'feedback-correct': isCorrect, 'feedback-incorrect': !isCorrect }\">\n            {{ feedbackMessage }}\n          </p>\n          <p v-if=\"isCorrect\">Pontos ganhos: {{ pointsEarned }}</p>\n          <button class=\"next-button\" @click=\"nextQuestion\">\n            {{ isLastQuestion ? 'Ver Resultados' : 'Próxima Palavra' }}\n          </button>\n        </div>\n      </template>\n    </div>\n  </GameContainer>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';\nimport GameContainer from \"@/components/game/GameContainer.vue\";\nimport { useGamePoints } from '@/composables/useGamePoints';\nimport { useGameTimer } from '@/composables/useGameTimer';\nimport { useVocabularyStore } from \"@/store/vocabulary\";\n\nconst gameInstructions = `Teste seus conhecimentos médicos neste quiz rápido! \nVocê terá um tempo limitado para responder cada questão. \nEscolha a palavra correta que corresponde à definição mostrada.\nUse perks para pular questões difíceis ou ganhar tempo extra.`;\n\nconst loading = ref(false);\nconst currentQuestionIndex = ref(0);\nconst timePerQuestion = ref(10);\nconst questionCount = ref(10);\nconst selectedQuestions = ref([]);\nconst quizVisible = ref(true);\nconst userAnswer = ref('');\nconst isAnswered = ref(false);\nconst isCorrect = ref(false);\nconst feedbackMessage = ref('');\nconst isLastQuestion = ref(false);\nconst timePercentage = ref(100);\nconst score = ref(0);\nconst pointsEarned = ref(0);\nconst correctAnswers = ref(0);\nconst gameCompleted = ref(false);\nconst timeExpired = ref(false);\n\nconst vocabularyStore = useVocabularyStore();\nconst { POINTS_CONFIG, awardPoints, usePerk } = useGamePoints();\n\nconst { timeLeft, timerDisplay, startTimer, pauseTimer, resetTimer } = useGameTimer({\n  initialTime: timePerQuestion.value,\n  onTimeUp: () => {\n    if (!isAnswered.value) {\n      isAnswered.value = true;\n      timeExpired.value = true;\n      isCorrect.value = false;\n      feedbackMessage.value = 'Tempo esgotado! A resposta correta era: ' + currentQuestion.value.word;\n    }\n  }\n});\n\nconst currentQuestion = computed(() => {\n  return selectedQuestions.value[currentQuestionIndex.value];\n});\n\nconst currentQuestionOptions = computed(() => {\n  return currentQuestion.value ? shuffleArray([...currentQuestion.value.options]) : [];\n});\n\nconst remainingQuestions = computed(() => {\n  return selectedQuestions.value.length - currentQuestionIndex.value;\n});\n\nconst AVAILABLE_PERKS = ['skip', 'extra_time'];\n\nfunction shuffleArray(array) {\n  return array.sort(() => Math.random() - 0.5);\n}\n\nfunction startQuiz() {\n  currentQuestionIndex.value = 0;\n  const filteredWords = vocabularyStore.filteredWords;\n  if (filteredWords.length === 0) {\n    alert(\"Nenhuma questão encontrada com os critérios selecionados.\");\n    quizVisible.value = false;\n    return;\n  }\n\n  // Select questions and generate options for each\n  const questions = shuffleArray([...filteredWords]).slice(0, questionCount.value);\n  selectedQuestions.value = questions.map(question => ({\n    ...question,\n    options: generateOptionsForQuestion(question, filteredWords)\n  }));\n\n  quizVisible.value = true;\n  resetQuestionState();\n}\n\nfunction generateOptionsForQuestion(question, allWords) {\n  // Always include the correct answer\n  const options = [question.word];\n  \n  // Get other random words for options\n  const otherWords = allWords\n    .filter(w => w.word !== question.word)\n    .map(w => w.word);\n  \n  // Shuffle and take 3 random words\n  const distractors = shuffleArray(otherWords).slice(0, 3);\n  \n  // Combine correct answer with distractors and shuffle\n  return shuffleArray([...options, ...distractors]);\n}\n\nfunction resetQuestionState() {\n  userAnswer.value = '';\n  isAnswered.value = false;\n  isCorrect.value = false;\n  feedbackMessage.value = '';\n  isLastQuestion.value = currentQuestionIndex.value === selectedQuestions.value.length - 1;\n  timePercentage.value = 100;\n  timeExpired.value = false;\n  resetTimer();\n  startTimer();\n}\n\nfunction handleTimeChange(e) {\n  timePerQuestion.value = parseInt(e.target.value);\n}\n\nfunction handleQuestionCountChange(e) {\n  questionCount.value = parseInt(e.target.value);\n}\n\nfunction selectAnswer(option) {\n  if (isAnswered.value || timeExpired.value) return;\n  userAnswer.value = option;\n  pauseTimer();\n  checkAnswer();\n}\n\nfunction checkAnswer() {\n  if (!currentQuestion.value) return;\n\n  isAnswered.value = true;\n  isCorrect.value = userAnswer.value.trim().toLowerCase() === currentQuestion.value.word.toLowerCase();\n  feedbackMessage.value = isCorrect.value\n    ? 'Resposta correta!'\n    : `Resposta incorreta! A resposta correta era: ${currentQuestion.value.word}`;\n\n  if (isCorrect.value) {\n    correctAnswers.value++;\n    score.value += POINTS_CONFIG.correctAnswer;\n  }\n}\n\nfunction nextQuestion() {\n  if (isLastQuestion.value) {\n    handleGameCompletion();\n    return;\n  }\n  currentQuestionIndex.value++;\n  resetQuestionState();\n}\n\nasync function handleGameCompletion() {\n  quizVisible.value = false;\n  gameCompleted.value = true;\n\n  const isPerfect = correctAnswers.value === selectedQuestions.value.length;\n  const points = calculateGamePoints(correctAnswers.value, isPerfect);\n  await awardPoints(points);\n  pointsEarned.value = points;\n}\n\nasync function handlePerk(perkId) {\n  const success = await usePerk(perkId);\n  if (!success) return;\n  if (perkId === 'skip') {\n    nextQuestion();\n  } else if (perkId === 'extra_time') {\n    timePercentage.value += 30;\n  }\n}\n\nfunction calculateGamePoints(correctAnswers, isPerfect) {\n  let points = correctAnswers * POINTS_CONFIG.correctAnswer;\n  if (isPerfect) {\n    points += POINTS_CONFIG.perfectGameBonus;\n  }\n  return points;\n}\n\n// Watch for time changes and update the progress bar\nwatch(timeLeft, (newTime) => {\n  timePercentage.value = (newTime / timePerQuestion.value) * 100;\n});\n\n// Update timer when timePerQuestion changes\nwatch(timePerQuestion, (newTime) => {\n  resetTimer();\n});\n\nonMounted(() => {\n  startQuiz();\n});\n\nonBeforeUnmount(() => {\n  // Cleanup logic if needed\n});\n</script>\n\n<style scoped>\n.game-settings {\n  min-width: 300px;\n  padding: var(--spacing-md);\n}\n\n.game-settings h3 {\n  margin-bottom: var(--spacing-md);\n  color: var(--text-color);\n}\n\n.setting-group {\n  margin-bottom: var(--spacing-md);\n}\n\n.setting-group label {\n  display: block;\n  margin-bottom: var(--spacing-sm);\n  color: var(--text-secondary);\n}\n\n.setting-group input[type=\"range\"] {\n  width: 100%;\n}\n\n.setting-description {\n  font-size: 0.9rem;\n  color: var(--text-secondary);\n}\n\n.quiz-container {\n  background-color: var(--surface-color);\n  border-radius: var(--radius-lg);\n  padding: var(--spacing-xl);\n  box-shadow: var(--shadow-md);\n  margin-top: var(--spacing-lg);\n  border: 1px solid var(--border-color);\n}\n\n.progress-bar {\n  height: 10px;\n  background-color: var(--background-color);\n  border-radius: var(--radius-md);\n  overflow: hidden;\n  margin-bottom: var(--spacing-md);\n}\n\n.timer {\n  height: 100%;\n  background-color: var(--primary-color);\n  transition: width 0.2s ease;\n}\n\n.question-info {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-md);\n  font-size: 1rem;\n  color: var(--text-color);\n}\n\n.question-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: var(--spacing-lg);\n}\n\n.question {\n  font-size: 1.25rem;\n  line-height: 1.6;\n  color: var(--text-color);\n  margin-bottom: var(--spacing-md);\n}\n\ninput[type=\"text\"] {\n  width: 100%;\n  padding: var(--spacing-md);\n  font-size: 1rem;\n  border: 1px solid var(--border-color);\n  border-radius: var(--radius-md);\n  margin-bottom: var(--spacing-md);\n}\n\ninput[type=\"text\"].correct {\n  border-color: var(--success-color);\n}\n\ninput[type=\"text\"].incorrect {\n  border-color: var(--error-color);\n}\n\n.submit-button {\n  padding: var(--spacing-md) var(--spacing-lg);\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.submit-button:disabled {\n  background-color: var(--disabled-color);\n  cursor: not-allowed;\n}\n\n.feedback-container {\n  margin-top: var(--spacing-lg);\n}\n\n.feedback-correct {\n  color: var(--success-color);\n}\n\n.feedback-incorrect {\n  color: var(--error-color);\n}\n\n.next-button {\n  margin-top: var(--spacing-md);\n  padding: var(--spacing-md) var(--spacing-lg);\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.results-container {\n  text-align: center;\n  margin-top: var(--spacing-lg);\n}\n\n.results-summary {\n  margin-top: var(--spacing-md);\n}\n\n.restart-button {\n  margin-top: var(--spacing-lg);\n  padding: var(--spacing-md) var(--spacing-lg);\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.options-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: var(--spacing-md);\n  width: 100%;\n  margin: var(--spacing-lg) 0;\n}\n\n.option-button {\n  padding: var(--spacing-md);\n  font-size: 1rem;\n  background-color: var(--surface-color);\n  color: var(--text-color);\n  border: 2px solid var(--border-color);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n}\n\n.option-button:hover:not(:disabled) {\n  background-color: var(--hover-color);\n  border-color: var(--primary-color);\n}\n\n.option-button.selected {\n  background-color: var(--primary-color);\n  color: white;\n  border-color: var(--primary-color);\n}\n\n.option-button.correct {\n  background-color: var(--success-color);\n  color: white;\n  border-color: var(--success-color);\n}\n\n.option-button.incorrect {\n  background-color: var(--error-color);\n  color: white;\n  border-color: var(--error-color);\n}\n\n.option-button.timeout-correct {\n  background-color: var(--warning-color);\n  color: var(--text-color);\n  border-color: var(--warning-color);\n}\n\n.option-button.timeout-incorrect {\n  opacity: 0.5;\n}\n\n.option-button:disabled {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n</style>\n","import { ref, onUnmounted } from 'vue';\n\nexport function useGameTimer(options = {}) {\n  const {\n    initialTime = 60,\n    tickRate = 10,\n    onTimeUp = () => {},\n    autoStart = false\n  } = options;\n\n  const timeLeft = ref(initialTime);\n  const timerDisplay = ref(initialTime.toString());\n  let timer = null;\n\n  function startTimer() {\n    clearTimer();\n    const initialTimeMs = timeLeft.value * 1000;\n    let remainingTime = initialTimeMs;\n\n    timer = setInterval(() => {\n      remainingTime -= tickRate;\n      timeLeft.value = remainingTime / 1000;\n      timerDisplay.value = (remainingTime / 1000).toFixed(0);\n\n      if (remainingTime <= 0) {\n        clearTimer();\n        onTimeUp();\n      }\n    }, tickRate);\n  }\n\n  function pauseTimer() {\n    clearTimer();\n  }\n\n  function resetTimer() {\n    clearTimer();\n    timeLeft.value = initialTime;\n    timerDisplay.value = initialTime.toString();\n  }\n\n  function clearTimer() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n\n  // Auto-start if configured\n  if (autoStart) {\n    startTimer();\n  }\n\n  // Clean up on component unmount\n  onUnmounted(() => {\n    clearTimer();\n  });\n\n  return {\n    timeLeft,\n    timerDisplay,\n    startTimer,\n    pauseTimer,\n    resetTimer,\n    clearTimer\n  };\n}"],"names":["loading","ref","currentQuestionIndex","timePerQuestion","questionCount","selectedQuestions","quizVisible","userAnswer","isAnswered","isCorrect","feedbackMessage","isLastQuestion","timePercentage","score","pointsEarned","correctAnswers","gameCompleted","timeExpired","vocabularyStore","useVocabularyStore","POINTS_CONFIG","awardPoints","useGamePoints","timeLeft","startTimer","pauseTimer","resetTimer","options","initialTime","tickRate","onTimeUp","autoStart","timerDisplay","toString","timer","clearTimer","remainingTime","value","setInterval","toFixed","clearInterval","onUnmounted","useGameTimer","currentQuestion","word","computed","currentQuestionOptions","shuffleArray","remainingQuestions","length","array","sort","Math","random","startQuiz","filteredWords","alert","questions","slice","map","question","generateOptionsForQuestion","resetQuestionState","allWords","distractors","filter","w","selectAnswer","option","trim","toLowerCase","correctAnswer","checkAnswer","nextQuestion","async","isPerfect","points","perfectGameBonus","calculateGamePoints","handleGameCompletion","watch","newTime","onMounted","onBeforeUnmount"],"mappings":"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"}