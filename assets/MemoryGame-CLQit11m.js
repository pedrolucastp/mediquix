import{u as a,G as e}from"./GameContainer-qHmNehOK.js";import{_ as l,s as t,u,w as o,c as s,l as n,h as r,e as v,g as i,m as d,p as c,n as p,k as m,r as f,a as h,d as g,f as w,t as _,F as C,j as b,q as k}from"./index-BYb6PZRb.js";import{u as y}from"./SelectorsComponent-DJdB6c_8.js";const G={class:"card-front"},T={class:"card-back"},j=l({__name:"GameCardFlip",props:{flipped:{type:Boolean,default:!1},matched:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},emits:["click"],setup(a,{emit:e}){const l=a,f=e,h=t(l.flipped),g=t(l.matched),w=u(),_=t(w.isDarkMode);o((()=>l.flipped),(a=>{h.value=a}),{flush:"post"}),o((()=>l.matched),(a=>{g.value=a}),{flush:"post"});const C=s((()=>({flipped:h.value,matched:g.value,dark:_.value}))),b=s((()=>({transform:g.value?"scale(0.95)":void 0,willChange:h.value?"transform":void 0}))),k=s((()=>({transform:h.value?"rotateY(180deg)":void 0})));return(e,l)=>{const t=n("font-awesome-icon");return v(),r("div",{class:m(["card",C.value]),style:p(b.value),onClick:l[0]||(l[0]=e=>!a.disabled&&f("click"))},[i("div",{class:"card-inner",style:p(k.value)},[i("div",G,[d(e.$slots,"front",{},(()=>[c(t,{icon:["fas","question"],size:"2x"})]))]),i("div",T,[d(e.$slots,"back",{},void 0)])],4)],6)}}},[["__scopeId","data-v-843b71fd"]]),I={class:"game-settings"},M={class:"setting-group"},O=["value"],P={class:"setting-description"},E={class:"game-content"},N={id:"definition"},S={id:"game-board"},F=l({__name:"MemoryGame",setup(l){const t=f(!1),u=y(),{POINTS_CONFIG:o,awardPoints:s}=a(),n=f(0),d=f(0),c=f(0),p=f([]),m=f(null),G=f([]),T=f([]),F=f(0),x=f(null),D=f(null),$=f(null),q=f([]),z=f(2),B=f(8),R=f(140);function A(a){B.value=parseInt(a.target.value),U()}function U(){n.value=0,d.value=0,c.value=0,F.value=0,q.value=[],z.value=2,x.value=null,D.value=null,$.value=null;let a=u.words.filter((a=>a.isActive));if(a.length<2)return void alert("Não há palavras suficientes para iniciar o jogo. Por favor, ajuste os filtros.");a.sort((()=>Math.random()-.5)),G.value=a.slice(0,B.value),T.value=[...G.value],J();const e=[...G.value,...G.value].map((a=>({word:a.word,flipped:!1,matched:!1})));e.sort((()=>Math.random()-.5)),p.value=e}function J(){0===T.value.length?m.value=null:(T.value.sort((()=>Math.random()-.5)),m.value=T.value.pop())}function L(){const a=p.value[x.value],e=p.value[D.value];if(2===z.value)a.word===m.value.word&&e.word===m.value.word?(a.matched=!0,e.matched=!0,q.value.push(a,e),V(),q.value.length===p.value.length?W():setTimeout((()=>{J()}),500)):setTimeout((()=>{Q()}),1e3);else{const l=p.value[$.value],t=m.value.word;let u=0;a.word===t&&u++,e.word===t&&u++,l.word===t&&u++,u>=2?([a,e,l].forEach((a=>{a.word===t&&(a.matched=!0)})),q.value.push(...[a,e,l].filter((a=>a.word===t))),V(),z.value=2,q.value.length===p.value.length?W():setTimeout((()=>{J()}),500)):setTimeout((()=>{Q(),z.value=2}),1e3)}}function Q(){null!==x.value&&(p.value[x.value].flipped=!1),null!==D.value&&(p.value[D.value].flipped=!1),null!==$.value&&(p.value[$.value].flipped=!1),V()}function V(){F.value=0,x.value=null,D.value=null,$.value=null}async function W(){const a=function(){const a=q.value.length/2*o.WORD_FOUND,e=d.value===q.value.length;return a+o.GAME_COMPLETION+(e?o.PERFECT_SCORE:0)}();await s(a),c.value=a,setTimeout((()=>{alert(`Parabéns! Você encontrou todos os pares em ${d.value} tentativas.\nPontos ganhos: ${a}`),U()}),500)}return h((()=>{U()})),(a,l)=>(v(),g(e,{title:"Jogo da Memória",gameInstructions:"Encontre os pares de palavras correspondentes!\n- Clique em uma carta para revelar a palavra\n- Combine a palavra com sua definição mostrada acima\n- Ganhe 2 pontos por cada par encontrado\n- Ganhe 10 pontos por completar o jogo\n- Ganhe 15 pontos de bônus por terminar sem erros\n- Use o perk 'hint' (5 pts) para revelar um par de cartas\n- O perk 'open_third_card' (6 pts) permite abrir três cartas simultaneamente",loading:t.value,score:n.value,availablePerks:["hint","open_third_card"],onSpecialtyChange:U,onDifficultyChange:U},{"game-settings":w((()=>[i("div",I,[l[1]||(l[1]=i("h3",null,"Configurações",-1)),i("div",M,[l[0]||(l[0]=i("label",null,"Número de pares",-1)),i("input",{type:"range",value:B.value,min:"8",max:"40",step:"4",onInput:A},null,40,O),i("p",P,"Quantidade de pares de palavras no jogo ("+_(B.value)+" pares)",1)])])])),default:w((()=>[i("div",E,[i("p",N,_(m.value?m.value.clue:"Todas as palavras foram encontradas!"),1),i("div",S,[(v(!0),r(C,null,b(p.value,((a,e)=>(v(),g(j,{key:e,flipped:a.flipped,matched:a.matched,disabled:F.value>=z.value,cardSize:R.value,onClick:a=>function(a){const e=p.value[a];e.flipped||e.matched||(e.flipped=!0,d.value++,0===F.value?(x.value=a,F.value=1):1===F.value?(D.value=a,F.value=2,2===z.value&&L()):2===F.value&&3===z.value&&($.value=a,F.value=3,L()))}(e)},{back:w((()=>[k(_(a.word),1)])),_:2},1032,["flipped","matched","disabled","cardSize","onClick"])))),128))])])])),_:1},8,["loading","score"]))}},[["__scopeId","data-v-3ceda538"]]);export{F as default};
//# sourceMappingURL=MemoryGame-CLQit11m.js.map
