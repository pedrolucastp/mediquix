{"version":3,"file":"QuickQuizGame-0_SohvRm.js","sources":["../../src/views/QuickQuizGame.vue"],"sourcesContent":["<template>\n  <div class=\"quiz\">\n    <h1>Quiz Rápido</h1>\n    <SelectorsComponent @specialty-change=\"resetQuiz\" @difficulty-change=\"resetQuiz\" />\n\n    <GamePerksMenu :availablePerks=\"['skip', 'extra_time']\" @perk-activated=\"handlePerk\" />\n\n    <div>\n      <div id=\"quiz-container\" v-if=\"quizVisible\">\n        <div id=\"timer\">\n          <span id=\"time\">{{ timerDisplay }}</span>s\n        </div>\n        <div id=\"question\">{{ currentQuestion?.clue }}</div>\n        <ul id=\"options\">\n          <li v-for=\"(option, index) in options\" :key=\"index\">\n            <button\n              :disabled=\"optionsDisabled\"\n              :style=\"{ backgroundColor: buttonColors[index] }\"\n              @click=\"selectOption(option, index)\"\n            >\n              {{ option }}\n            </button>\n          </li>\n        </ul>\n        <button id=\"next-button\" v-if=\"showNextButton\" @click=\"nextQuestion\">\n          Próxima Pergunta\n        </button>\n      </div>\n    </div>\n\n    <!-- Show game completion message and points earned -->\n    <div v-if=\"gameCompleted\" class=\"completion-message\">\n      <h3>Quiz Completo!</h3>\n      <p>Pontos ganhos: {{ pointsEarned }}</p>\n      <BaseButton variant=\"primary\" @click=\"resetQuiz\">Jogar Novamente</BaseButton>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onBeforeUnmount } from \"vue\";\nimport SelectorsComponent from \"../components/SelectorsComponent.vue\";\nimport GamePerksMenu from \"../components/game/GamePerksMenu.vue\";\nimport BaseButton from \"../components/base/BaseButton.vue\";\nimport { useVocabularyStore } from \"../store/vocabulary\";\nimport { useGamePoints } from \"../composables/useGamePoints\";\n\nconst currentQuestionIndex = ref(0);\nconst timeLeft = ref(7);\nconst selectedQuestions = ref([]);\nconst quizVisible = ref(true);\nconst options = ref([]);\nconst timerDisplay = ref(\"7\");\nconst showNextButton = ref(false);\nconst optionsDisabled = ref(false);\nconst buttonColors = ref([]);\nconst gameCompleted = ref(false);\nconst pointsEarned = ref(0);\nconst correctAnswers = ref(0);\n\nlet timer = null;\n\nconst vocabularyStore = useVocabularyStore();\nconst { POINTS_CONFIG, awardPoints, usePerk } = useGamePoints();\n\nconst currentQuestion = computed(() => {\n  return selectedQuestions.value[currentQuestionIndex.value];\n});\n\nfunction shuffleArray(array) {\n  return array.sort(() => Math.random() - 0.5);\n}\n\nfunction generateOptions(correctAnswer) {\n  const opts = [correctAnswer];\n  const incorrectOptions = vocabularyStore.filteredWords\n    .filter((word) => word.word !== correctAnswer)\n    .map((word) => word.word);\n  shuffleArray(incorrectOptions);\n  while (opts.length < 4 && incorrectOptions.length > 0) {\n    opts.push(incorrectOptions.pop());\n  }\n  return shuffleArray(opts);\n}\n\nfunction startTimer() {\n  const initialTime = timeLeft.value * 1000;\n  let remainingTime = initialTime;\n\n  timer = setInterval(() => {\n    remainingTime -= 10;\n\n    timerDisplay.value = (remainingTime / 1000).toFixed(0);\n\n    if (remainingTime <= 0) {\n      clearInterval(timer);\n      selectOption(null);\n      optionsDisabled.value = true;\n      showNextButton.value = true;\n    }\n  }, 10);\n}\n\nfunction showQuestion() {\n  clearInterval(timer);\n  if (currentQuestionIndex.value >= selectedQuestions.value.length) {\n    alert(\"Você completou o quiz!\");\n    resetQuiz();\n    return;\n  }\n  optionsDisabled.value = false;\n  showNextButton.value = false;\n  buttonColors.value = [];\n  if (currentQuestion.value) {\n    options.value = generateOptions(currentQuestion.value.word);\n    buttonColors.value = options.value.map(() => \"\");\n    timeLeft.value = 7;\n    timerDisplay.value = \"7\";\n    startTimer();\n  }\n}\n\nfunction selectOption(selectedOption, btnIndex = null) {\n  clearInterval(timer);\n  if (!currentQuestion.value) return;\n\n  const correctAnswer = currentQuestion.value.word;\n\n  if (selectedOption !== null) {\n    // User selected an option\n    if (selectedOption === correctAnswer && btnIndex !== null) {\n      buttonColors.value[btnIndex] = \"#2ecc71\"; // Green for correct\n      correctAnswers.value++;\n    } else if (btnIndex !== null) {\n      buttonColors.value[btnIndex] = \"#e74c3c\"; // Red for wrong\n    }\n  }\n\n  // Show correct answer\n  options.value.forEach((opt, index) => {\n    if (opt === correctAnswer) {\n      // If time ran out (selectedOption is null), highlight in yellow\n      // Otherwise, highlight in green (either it was selected correctly or showing the right answer after wrong selection)\n      buttonColors.value[index] = selectedOption === null ? \"#ffd700\" : \"#2ecc71\";\n    }\n  });\n\n  optionsDisabled.value = true;\n  showNextButton.value = true;\n}\n\nasync function nextQuestion() {\n  currentQuestionIndex.value++;\n\n  if (currentQuestionIndex.value >= selectedQuestions.value.length) {\n    await handleGameCompletion();\n    return;\n  }\n\n  timeLeft.value = 7;\n  showQuestion();\n}\n\nasync function handleGameCompletion() {\n  quizVisible.value = false;\n  gameCompleted.value = true;\n\n  const isPerfect = correctAnswers.value === selectedQuestions.value.length;\n  const points = calculateGamePoints(correctAnswers.value, isPerfect);\n  await awardPoints(points);\n  pointsEarned.value = points;\n}\n\nasync function handlePerk(perkId) {\n  // Always deduct points before applying perk effect\n  const success = await usePerk(perkId);\n  if (!success) return;\n  if (perkId === \"skip\") {\n    nextQuestion();\n  } else if (perkId === \"extra_time\") {\n    timeLeft.value += 30;\n  }\n}\n\nfunction startQuiz() {\n  currentQuestionIndex.value = 0;\n  // Use vocabularyStore's filtered words\n  const filteredWords = vocabularyStore.filteredWords;\n  if (filteredWords.length === 0) {\n    alert(\"Nenhuma questão encontrada com os critérios selecionados.\");\n    quizVisible.value = false;\n    return;\n  }\n  // Get random selection of words for the quiz\n  selectedQuestions.value = shuffleArray([...filteredWords]).slice(0, 10);\n  quizVisible.value = true;\n  timeLeft.value = 7;\n  showQuestion();\n}\n\nfunction resetQuiz() {\n  clearInterval(timer);\n  quizVisible.value = false;\n  gameCompleted.value = false;\n  pointsEarned.value = 0;\n  correctAnswers.value = 0;\n  currentQuestionIndex.value = 0;\n  startQuiz();\n}\n\nonMounted(() => {\n  startQuiz();\n});\n\nonBeforeUnmount(() => {\n  clearInterval(timer);\n});\n</script>\n\n<style scoped>\n.quiz {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--spacing-md);\n}\n\n#quiz-container {\n  background-color: var(--surface-color);\n  border-radius: var(--radius-lg);\n  padding: var(--spacing-xl);\n  box-shadow: var(--shadow-md);\n  margin-top: var(--spacing-lg);\n  border: 1px solid var(--border-color);\n}\n\n#timer {\n  font-size: 2rem;\n  font-weight: 700;\n  color: var(--primary-color);\n  margin-bottom: var(--spacing-md);\n  animation: pulse 1s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n#question {\n  font-size: 1.25rem;\n  line-height: 1.6;\n  color: var(--text-color);\n  margin-bottom: var(--spacing-lg);\n  padding: var(--spacing-md);\n  background-color: var(--background-color);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n}\n\n#options {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: var(--spacing-md);\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n#options button {\n  width: 100%;\n  padding: var(--spacing-md);\n  font-size: 1rem;\n  font-weight: 500;\n  text-align: left;\n  background-color: var(--surface-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  border-radius: var(--radius-md);\n  transition: all 0.2s ease;\n}\n\n#options button:hover:not([disabled]) {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-sm);\n  background-color: var(--background-color);\n  border-color: var(--primary-color);\n}\n\n#options button:disabled {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n#next-button {\n  margin-top: var(--spacing-lg);\n  padding: var(--spacing-md) var(--spacing-lg);\n  font-size: 1rem;\n  font-weight: 600;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n#next-button:hover {\n  background-color: var(--secondary-color);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-sm);\n}\n\n/* Dark mode styles */\n:deep(.dark) #quiz-container {\n  background-color: var(--dark-surface-color);\n  border-color: var(--dark-border-color);\n}\n\n:deep(.dark) #question {\n  background-color: var(--dark-background-color);\n  color: var(--dark-text-color);\n  border-color: var(--dark-border-color);\n}\n\n:deep(.dark) #options button {\n  background-color: var(--dark-surface-color);\n  color: var(--dark-text-color);\n  border-color: var(--dark-border-color);\n}\n\n:deep(.dark) #options button:hover:not([disabled]) {\n  background-color: var(--dark-background-color);\n  border-color: var(--dark-primary-color);\n}\n\n/* Responsive styles */\n@media (max-width: 768px) {\n  .quiz {\n    padding: var(--spacing-sm);\n    width: 100%;\n  }\n\n  #quiz-container {\n    padding: var(--spacing-md);\n  }\n\n  #timer {\n    font-size: 1.5rem;\n  }\n\n  #question {\n    font-size: 1.1rem;\n  }\n\n  #options {\n    grid-template-columns: 1fr;\n  }\n\n  #options button {\n    padding: var(--spacing-sm);\n    font-size: 0.95rem;\n  }\n}\n</style>\n"],"names":["currentQuestionIndex","ref","timeLeft","selectedQuestions","quizVisible","options","timerDisplay","showNextButton","optionsDisabled","buttonColors","gameCompleted","pointsEarned","correctAnswers","timer","vocabularyStore","useVocabularyStore","awardPoints","usePerk","useGamePoints","currentQuestion","computed","value","shuffleArray","array","sort","Math","random","showQuestion","clearInterval","length","alert","resetQuiz","correctAnswer","opts","incorrectOptions","filteredWords","filter","word","map","push","pop","generateOptions","remainingTime","setInterval","toFixed","selectOption","startTimer","selectedOption","btnIndex","forEach","opt","index","async","nextQuestion","isPerfect","points","calculateGamePoints","handleGameCompletion","handlePerk","perkId","startQuiz","slice","onMounted","onBeforeUnmount"],"mappings":"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"}