{"version":3,"file":"HangmanGame-CjFL7xxA.js","sources":["../../src/views/HangmanGame.vue"],"sourcesContent":["<template>\n  <div class=\"hangman-game\">\n    <h1>Jogo da Forca</h1>\n    <SelectorsComponent @specialty-change=\"startGame\" @difficulty-change=\"startGame\" />\n    \n    <GamePerksMenu :availablePerks=\"['hint']\" @perk-activated=\"handlePerk\" />\n\n    <div class=\"game-container\" v-show=\"gameStarted\">\n      <!-- Figura da Forca -->\n      <div class=\"hangman-figure\">\n        <svg height=\"250\" width=\"200\" id=\"hangman-svg\">\n          <!-- Base da forca -->\n          <line x1=\"10\" y1=\"240\" x2=\"190\" y2=\"240\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line x1=\"60\" y1=\"240\" x2=\"60\" y2=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line x1=\"58\" y1=\"20\" x2=\"152\" y2=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line x1=\"150\" y1=\"20\" x2=\"150\" y2=\"50\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <!-- Partes do boneco, controladas por v-show -->\n          <circle v-show=\"showHead\" cx=\"150\" cy=\"70\" r=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" fill=\"none\" />\n          <line v-show=\"showBody\" x1=\"150\" y1=\"90\" x2=\"150\" y2=\"150\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line v-show=\"showLeftArm\" x1=\"150\" y1=\"120\" x2=\"120\" y2=\"100\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line v-show=\"showRightArm\" x1=\"150\" y1=\"120\" x2=\"180\" y2=\"100\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line v-show=\"showLeftLeg\" x1=\"150\" y1=\"150\" x2=\"120\" y2=\"180\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          <line v-show=\"showRightLeg\" x1=\"150\" y1=\"150\" x2=\"180\" y2=\"180\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n        </svg>\n      </div>\n      \n      <div class=\"message-container\">\n        <p>{{ message }}</p>\n      </div>\n\n      <div class=\"word-container\">\n        <span v-for=\"(letter, index) in displayedWord\" :key=\"index\" class=\"letter\">\n          {{ letter }}\n        </span>\n      </div>\n\n      <div class=\"clue-container\">\n        <p>{{ currentWord?.clue }}</p>\n      </div>\n\n      <div class=\"guess-container\">\n        <input \n          type=\"text\" \n          v-model=\"guess\" \n          @keyup.enter=\"makeGuess\"\n          maxlength=\"1\"\n          :disabled=\"gameOver\"\n        />\n        <button @click=\"makeGuess\" :disabled=\"gameOver\">Tentar</button>\n      </div>\n\n      <button id=\"restart-btn\" v-show=\"showRestart\" @click=\"startGame\">Novo Jogo</button>\n\n      <!-- Show points earned when game ends -->\n      <div v-if=\"gameOver\" class=\"completion-message\">\n        <p v-if=\"won\">Parabéns! Você venceu!</p>\n        <p v-else>Não foi dessa vez. A palavra era: {{ currentWord?.word }}</p>\n        <p v-if=\"pointsEarned\">Pontos ganhos: {{ pointsEarned }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport SelectorsComponent from '@/components/SelectorsComponent.vue';\nimport GamePerksMenu from '@/components/game/GamePerksMenu.vue';\nimport { useVocabularyStore } from '@/store/vocabulary';\nimport { useGamePoints } from '@/composables/useGamePoints';\n\nconst vocabularyStore = useVocabularyStore();\nconst { POINTS_CONFIG, awardPoints, usePerk } = useGamePoints();\n\n// Estado do jogo\nconst currentWord = ref(null);\nconst guessedLetters = ref([]);\nconst guess = ref('');\nconst message = ref('');\nconst gameStarted = ref(false);\nconst showRestart = ref(false);\nconst maxLives = 6;\nconst lives = ref(maxLives);\nconst gameOver = ref(false);\nconst won = ref(false);\nconst pointsEarned = ref(0);\n\n// Computed properties para partes da figura da forca\nconst showHead = computed(() => lives.value < 6);\nconst showBody = computed(() => lives.value < 5);\nconst showLeftArm = computed(() => lives.value < 4);\nconst showRightArm = computed(() => lives.value < 3);\nconst showLeftLeg = computed(() => lives.value < 2);\nconst showRightLeg = computed(() => lives.value < 1);\n\nconst displayedWord = computed(() => {\n  if (!currentWord.value) return [];\n  return currentWord.value.word.split('').map(letter => \n    guessedLetters.value.includes(letter.toUpperCase()) ? letter : '_'\n  );\n});\n\nfunction startGame() {\n  const filteredWords = vocabularyStore.filteredWords;\n  if (filteredWords.length === 0) {\n    alert('Nenhuma palavra encontrada com os critérios selecionados.');\n    return;\n  }\n\n  currentWord.value = filteredWords[Math.floor(Math.random() * filteredWords.length)];\n  guessedLetters.value = [];\n  guess.value = '';\n  message.value = '';\n  gameStarted.value = true;\n  showRestart.value = false;\n  lives.value = maxLives;\n  gameOver.value = false;\n  won.value = false;\n  pointsEarned.value = 0;\n}\n\nasync function makeGuess() {\n  if (!guess.value || gameOver.value) return;\n\n  const letter = guess.value.toUpperCase();\n  guess.value = '';\n\n  if (guessedLetters.value.includes(letter)) {\n    message.value = 'Você já tentou essa letra!';\n    return;\n  }\n\n  guessedLetters.value.push(letter);\n\n  if (!currentWord.value.word.toUpperCase().includes(letter)) {\n    lives.value--;\n    message.value = `Letra \"${letter}\" não encontrada. ${lives.value} tentativas restantes.`;\n    \n    if (lives.value === 0) {\n      await handleGameOver(false);\n    }\n  } else {\n    message.value = `Boa! A letra \"${letter}\" existe na palavra.`;\n    \n    // Verifica se a palavra está completa\n    if (displayedWord.value.join('') === currentWord.value.word) {\n      await handleGameOver(true);\n    }\n  }\n}\n\nasync function handleGameOver(hasWon) {\n  gameOver.value = true;\n  showRestart.value = true;\n  won.value = hasWon;\n\n  if (hasWon) {\n    message.value = 'Parabéns! Você venceu!';\n    const points = calculatePoints();\n    await awardPoints(points);\n    pointsEarned.value = points;\n  } else {\n    message.value = `Game Over! A palavra era: ${currentWord.value.word}`;\n  }\n}\n\nfunction calculatePoints() {\n  // Pontos base por vencer\n  let points = POINTS_CONFIG.GAME_COMPLETION;\n  \n  // Pontos bônus com base nas vidas restantes\n  points += lives.value * 2;\n  \n  // Bônus por jogo perfeito (sem erros)\n  if (lives.value === maxLives) {\n    points += POINTS_CONFIG.PERFECT_SCORE;\n  }\n  \n  return points;\n}\n\nasync function handlePerk(perkId) {\n  // Always deduct points before applying perk effect\n  const success = await usePerk(perkId);\n  if (!success) return;\n  if (perkId === 'hint' && currentWord.value && !gameOver.value) {\n    // Encontra uma letra não revelada\n    const word = currentWord.value.word.toUpperCase();\n    const unrevealedLetters = word\n      .split('')\n      .filter(letter => !guessedLetters.value.includes(letter));\n    if (unrevealedLetters.length > 0) {\n      // Revela uma letra não revelada aleatória\n      const letter = unrevealedLetters[Math.floor(Math.random() * unrevealedLetters.length)];\n      guessedLetters.value.push(letter);\n      message.value = `Dica: A letra \"${letter}\" existe na palavra.`;\n      // Verifica se a palavra está completa após a dica\n      if (displayedWord.value.join('') === currentWord.value.word) {\n        handleGameOver(true);\n      }\n    }\n  }\n}\n\n// Inicia o jogo ao montar\nonMounted(() => {\n  startGame();\n});\n</script>\n\n<style scoped>\n.hangman-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n  height: 100%;\n  overflow: auto;\n}\n\n.hangman-game h1 {\n  margin-bottom: 1rem;\n}\n\n.game-container {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  width: 100%;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.hangman-figure {\n  margin-bottom: 2rem;\n}\n\n.word-container {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n  flex-wrap: wrap;\n}\n\n.word-container .letter {\n  border-bottom: 2px solid var(--secondary-color);\n  width: 2rem;\n  height: 2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n\n.clue-container {\n  margin: 1rem;\n  font-size: 1.125rem;\n  border: 2px solid #333;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.info-container p {\n  font-size: 1rem;\n  margin: 0;\n  color: var(--secondary-color);\n}\n\n.guess-container {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n}\n\n.guess-container input {\n  font-size: 1rem;\n  text-transform: uppercase;\n  text-align: center;\n  padding: 0.5rem 1rem;\n}\n\n.guess-container button {\n  padding: 0.5rem 1rem;\n  background-color: var(--primary-color);\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.guess-container button:hover {\n  background-color: #1f6391;\n}\n\n.message-container {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--accent-color);\n  margin-bottom: 1.5rem;\n}\n\n#restart-btn {\n  padding: 0.5rem 1rem;\n  background-color: var(--accent-color);\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n  margin: auto;\n}\n\n#restart-btn:hover {\n  background-color: #c0392b;\n}\n\n.completion-message {\n  margin-top: var(--spacing-md);\n  text-align: center;\n  padding: var(--spacing-md);\n  background-color: var(--surface-color);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n}\n\n:deep(.dark) .completion-message {\n  background-color: var(--dark-surface-color);\n  border-color: var(--dark-border-color);\n}\n\n/* Responsivo */\n@media (max-width: 768px) {\n  .game-container {\n    flex-direction: column;\n  }\n\n  .word-container .letter {\n    width: 1.5rem;\n    height: 1.5rem;\n    font-size: 1rem;\n  }\n\n  .guess-container input,\n  .guess-container button,\n  #restart-btn {\n    max-width: 200px;\n  }\n}\n</style>\n"],"names":["vocabularyStore","useVocabularyStore","POINTS_CONFIG","awardPoints","usePerk","useGamePoints","currentWord","ref","guessedLetters","guess","message","gameStarted","showRestart","lives","gameOver","won","pointsEarned","showHead","computed","value","showBody","showLeftArm","showRightArm","showLeftLeg","showRightLeg","displayedWord","word","split","map","letter","includes","toUpperCase","startGame","filteredWords","length","Math","floor","random","alert","async","makeGuess","push","join","handleGameOver","hasWon","points","GAME_COMPLETION","PERFECT_SCORE","calculatePoints","handlePerk","perkId","unrevealedLetters","filter","onMounted"],"mappings":"kkCAsEA,MAAMA,EAAkBC,KAClBC,cAAEA,EAAAC,YAAeA,EAAaC,QAAAA,GAAYC,IAG1CC,EAAcC,EAAI,MAClBC,EAAiBD,EAAI,IACrBE,EAAQF,EAAI,IACZG,EAAUH,EAAI,IACdI,EAAcJ,GAAI,GAClBK,EAAcL,GAAI,GAElBM,EAAQN,EADG,GAEXO,EAAWP,GAAI,GACfQ,EAAMR,GAAI,GACVS,EAAeT,EAAI,GAGnBU,GAAWC,GAAS,IAAML,EAAMM,MAAQ,IACxCC,GAAWF,GAAS,IAAML,EAAMM,MAAQ,IACxCE,GAAcH,GAAS,IAAML,EAAMM,MAAQ,IAC3CG,GAAeJ,GAAS,IAAML,EAAMM,MAAQ,IAC5CI,GAAcL,GAAS,IAAML,EAAMM,MAAQ,IAC3CK,GAAeN,GAAS,IAAML,EAAMM,MAAQ,IAE5CM,GAAgBP,GAAS,IACxBZ,EAAYa,MACVb,EAAYa,MAAMO,KAAKC,MAAM,IAAIC,KAAIC,GAC1CrB,EAAeW,MAAMW,SAASD,EAAOE,eAAiBF,EAAS,MAFlC,KAMjC,SAASG,KACP,MAAMC,EAAgBjC,EAAgBiC,cACT,IAAzBA,EAAcC,QAKN5B,EAAAa,MAAQc,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcC,SAC3E1B,EAAeW,MAAQ,GACvBV,EAAMU,MAAQ,GACdT,EAAQS,MAAQ,GAChBR,EAAYQ,OAAQ,EACpBP,EAAYO,OAAQ,EACpBN,EAAMM,MAlCS,EAmCfL,EAASK,OAAQ,EACjBJ,EAAII,OAAQ,EACZH,EAAaG,MAAQ,GAbnBmB,MAAM,4DAcV,CAEAC,eAAeC,KACb,IAAK/B,EAAMU,OAASL,EAASK,MAAO,OAE9B,MAAAU,EAASpB,EAAMU,MAAMY,cAC3BtB,EAAMU,MAAQ,GAEVX,EAAeW,MAAMW,SAASD,GAChCnB,EAAQS,MAAQ,8BAIHX,EAAAW,MAAMsB,KAAKZ,GAErBvB,EAAYa,MAAMO,KAAKK,cAAcD,SAASD,IAQzCnB,EAAAS,MAAQ,iBAAiBU,wBAG7BJ,GAAcN,MAAMuB,KAAK,MAAQpC,EAAYa,MAAMO,YAC/CiB,IAAe,KAXjB9B,EAAAM,QACNT,EAAQS,MAAQ,UAAUU,sBAA2BhB,EAAMM,8BAEvC,IAAhBN,EAAMM,aACFwB,IAAe,IAU3B,CAEAJ,eAAeI,GAAeC,GAK5B,GAJA9B,EAASK,OAAQ,EACjBP,EAAYO,OAAQ,EACpBJ,EAAII,MAAQyB,EAERA,EAAQ,CACVlC,EAAQS,MAAQ,yBAChB,MAAM0B,EAQV,WAEE,IAAIA,EAAS3C,EAAc4C,gBAG3BD,GAAwB,EAAdhC,EAAMM,MA1FD,IA6FXN,EAAMM,QACR0B,GAAU3C,EAAc6C,eAGnB,OAAAF,CACT,CArBmBG,SACT7C,EAAY0C,GAClB7B,EAAaG,MAAQ0B,CACzB,MACInC,EAAQS,MAAQ,6BAA6Bb,EAAYa,MAAMO,MAEnE,CAiBAa,eAAeU,GAAWC,GAGxB,SADsB9C,EAAQ8C,IAEf,SAAXA,GAAqB5C,EAAYa,QAAUL,EAASK,MAAO,CAE7D,MACMgC,EADO7C,EAAYa,MAAMO,KAAKK,cAEjCJ,MAAM,IACNyB,QAAiBvB,IAACrB,EAAeW,MAAMW,SAASD,KAC/C,GAAAsB,EAAkBjB,OAAS,EAAG,CAE1B,MAAAL,EAASsB,EAAkBhB,KAAKC,MAAMD,KAAKE,SAAWc,EAAkBjB,SAC/D1B,EAAAW,MAAMsB,KAAKZ,GAClBnB,EAAAS,MAAQ,kBAAkBU,wBAE9BJ,GAAcN,MAAMuB,KAAK,MAAQpC,EAAYa,MAAMO,MACrDiB,IAAe,EAEvB,CACA,CACA,QAGAU,GAAU,KACGrB,IAAA"}