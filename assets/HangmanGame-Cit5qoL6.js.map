{"version":3,"file":"HangmanGame-Cit5qoL6.js","sources":["../../src/views/HangmanGame.vue"],"sourcesContent":["<template>\n  <GameContainer\n    title=\"Jogo da Forca\"\n    :gameInstructions=\"gameInstructions\"\n    :loading=\"loading\"\n    :score=\"score\"\n    :availablePerks=\"['hint']\"\n    @specialty-change=\"startGame\"\n    @difficulty-change=\"startGame\"\n  >\n    <template #game-settings>\n      <div class=\"game-settings\">\n        <h3>Configurações</h3>\n        <div class=\"setting-group\">\n          <label>Número de vidas: {{ lives }}</label>\n          <input type=\"range\" :value=\"maxLives\" min=\"4\" max=\"10\" step=\"1\" @input=\"handleLivesChange\" />\n          <p class=\"setting-description\">Quantidade de tentativas antes de perder o jogo</p>\n        </div>\n      </div>\n    </template>\n\n    <div class=\"game-content\">\n      <div class=\"game-container\" v-show=\"gameStarted\">\n        <!-- Figura da Forca -->\n        <div class=\"hangman-figure\">\n          <svg height=\"250\" width=\"200\" id=\"hangman-svg\">\n            <!-- Base da forca -->\n            <line x1=\"10\" y1=\"240\" x2=\"190\" y2=\"240\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line x1=\"60\" y1=\"240\" x2=\"60\" y2=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line x1=\"58\" y1=\"20\" x2=\"152\" y2=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line x1=\"150\" y1=\"20\" x2=\"150\" y2=\"50\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <!-- Partes do boneco, controladas por v-show -->\n            <circle v-show=\"showHead\" cx=\"150\" cy=\"70\" r=\"20\" stroke=\"#2c3e50\" stroke-width=\"4\" fill=\"none\" />\n            <!-- Facial features -->\n            <g v-show=\"showLeftEye\">\n              <!-- Normal eye or X eye based on game state -->\n              <circle v-if=\"!gameOver || won\" cx=\"143\" cy=\"65\" r=\"3\" stroke=\"#2c3e50\" stroke-width=\"2\" fill=\"#2c3e50\" />\n              <g v-else>\n                <line x1=\"140\" y1=\"62\" x2=\"146\" y2=\"68\" stroke=\"#2c3e50\" stroke-width=\"2\" />\n                <line x1=\"146\" y1=\"62\" x2=\"140\" y2=\"68\" stroke=\"#2c3e50\" stroke-width=\"2\" />\n              </g>\n            </g>\n            <g v-show=\"showRightEye\">\n              <!-- Normal eye or X eye based on game state -->\n              <circle v-if=\"!gameOver || won\" cx=\"157\" cy=\"65\" r=\"3\" stroke=\"#2c3e50\" stroke-width=\"2\" fill=\"#2c3e50\" />\n              <g v-else>\n                <line x1=\"154\" y1=\"62\" x2=\"160\" y2=\"68\" stroke=\"#2c3e50\" stroke-width=\"2\" />\n                <line x1=\"160\" y1=\"62\" x2=\"154\" y2=\"68\" stroke=\"#2c3e50\" stroke-width=\"2\" />\n              </g>\n            </g>\n            <line v-show=\"showNose\" x1=\"150\" y1=\"65\" x2=\"150\" y2=\"75\" stroke=\"#2c3e50\" stroke-width=\"2\" />\n            <!-- Mouth changes based on game state -->\n            <g v-show=\"showMouth\">\n              <path v-if=\"!gameOver || won\" d=\"M142 78 Q150 83 158 78\" stroke=\"#2c3e50\" stroke-width=\"2\" fill=\"none\" />\n              <path v-else d=\"M142 82 Q150 77 158 82\" stroke=\"#2c3e50\" stroke-width=\"2\" fill=\"none\" />\n            </g>\n            <!-- Body parts -->\n            <line v-show=\"showBody\" x1=\"150\" y1=\"90\" x2=\"150\" y2=\"150\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line v-show=\"showLeftArm\" x1=\"150\" y1=\"120\" x2=\"120\" y2=\"100\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line v-show=\"showRightArm\" x1=\"150\" y1=\"120\" x2=\"180\" y2=\"100\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line v-show=\"showLeftLeg\" x1=\"150\" y1=\"150\" x2=\"120\" y2=\"180\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n            <line v-show=\"showRightLeg\" x1=\"150\" y1=\"150\" x2=\"180\" y2=\"180\" stroke=\"#2c3e50\" stroke-width=\"4\" />\n          </svg>\n        </div>\n        \n        <div class=\"message-container\">\n          <p>{{ message }}</p>\n        </div>\n\n        <div class=\"word-container\">\n          <span v-for=\"(letter, index) in displayedWord\" :key=\"index\" class=\"letter\">\n            {{ letter }}\n          </span>\n        </div>\n\n        <div class=\"clue-container\">\n          <p>{{ currentWord?.clue }}</p>\n        </div>\n\n        <div class=\"guess-container\">\n          <input \n            type=\"text\" \n            v-model=\"guess\" \n            @keyup.enter=\"makeGuess\"\n            maxlength=\"1\"\n            :disabled=\"gameOver\"\n          />\n          <button @click=\"makeGuess\" :disabled=\"gameOver\">Tentar</button>\n        </div>\n\n        <button id=\"restart-btn\" v-show=\"showRestart\" @click=\"startGame\">Novo Jogo</button>\n\n        <!-- Show points earned when game ends -->\n        <div v-if=\"gameOver\" class=\"completion-message\">\n          <p v-if=\"won\">Parabéns! Você venceu!</p>\n          <p v-else>Não foi dessa vez. A palavra era: {{ currentWord?.word }}</p>\n          <p v-if=\"pointsEarned\">Pontos ganhos: {{ pointsEarned }}</p>\n        </div>\n      </div>\n    </div>\n  </GameContainer>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport GameContainer from \"@/components/game/GameContainer.vue\";\nimport GameMenuBar from '@/components/game/GameMenuBar.vue';\nimport { useVocabularyStore } from '@/store/vocabulary';\nimport { useGamePoints } from '@/composables/useGamePoints';\n\nconst gameInstructions = `Adivinhe a palavra antes de completar o boneco!\n- Digite uma letra para tentar adivinhar a palavra\n- Ganhe 2 pontos por cada letra correta\n- Ganhe 10 pontos por completar o jogo\n- Ganhe 15 pontos de bônus por não errar nenhuma letra\n- Ganhe 2 pontos extras por cada vida restante\n- Use 'hint' (5 pts) para revelar uma letra\n- Use 'skip' (8 pts) para pular a palavra atual`;\n\nconst loading = ref(false);\nconst score = ref(0);\nconst vocabularyStore = useVocabularyStore();\nconst { POINTS_CONFIG, awardPoints, usePerk } = useGamePoints();\n\n// Estado do jogo\nconst currentWord = ref(null);\nconst guessedLetters = ref([]);\nconst guess = ref('');\nconst message = ref('');\nconst gameStarted = ref(false);\nconst showRestart = ref(false);\nconst maxLives = ref(10); // Aumentado para 10 vidas\nconst lives = ref(maxLives.value);\nconst gameOver = ref(false);\nconst won = ref(false);\nconst pointsEarned = ref(0);\n\n// Computed properties para partes da figura da forca\nfunction getFeatureVisibility(feature) {\n  const totalMistakes = maxLives.value - lives.value;\n  const livesConfig = {\n    10: {\n      head: 1, body: 2, leftArm: 3, rightArm: 4, leftLeg: 5, rightLeg: 6,\n      mouth: 7, leftEye: 8, rightEye: 9, nose: 10\n    },\n    9: {\n      head: 1, body: 2, leftArm: 3, rightArm: 4, leftLeg: 5, rightLeg: 6,\n      mouth: 7, leftEye: 8, rightEye: 8, nose: 9\n    },\n    8: {\n      head: 1, body: 2, leftArm: 3, rightArm: 4, leftLeg: 5, rightLeg: 6,\n      mouth: 7, leftEye: 7, rightEye: 7, nose: 8\n    },\n    7: {\n      head: 1, body: 3, leftArm: 4, rightArm: 5, leftLeg: 6, rightLeg: 7,\n      mouth: 2, leftEye: 2, rightEye: 2, nose: 2\n    },\n    6: {\n      head: 1, body: 2, leftArm: 3, rightArm: 4, leftLeg: 5, rightLeg: 6,\n      mouth: 1, leftEye: 1, rightEye: 1, nose: 1\n    },\n    5: {\n      head: 1, body: 3, leftArm: 4, rightArm: 4, leftLeg: 5, rightLeg: 5,\n      mouth: 2, leftEye: 2, rightEye: 2, nose: 2\n    },\n    4: {\n      head: 1, body: 2, leftArm: 3, rightArm: 3, leftLeg: 4, rightLeg: 4,\n      mouth: 1, leftEye: 1, rightEye: 1, nose: 1\n    }\n  };\n\n  const config = livesConfig[maxLives.value] || livesConfig[6]; // Default to 6 lives config if invalid\n  return totalMistakes >= config[feature];\n}\n\nconst showHead = computed(() => getFeatureVisibility('head'));\nconst showBody = computed(() => getFeatureVisibility('body'));\nconst showLeftArm = computed(() => getFeatureVisibility('leftArm'));\nconst showRightArm = computed(() => getFeatureVisibility('rightArm'));\nconst showLeftLeg = computed(() => getFeatureVisibility('leftLeg'));\nconst showRightLeg = computed(() => getFeatureVisibility('rightLeg'));\nconst showMouth = computed(() => {\n  if (gameOver.value && !won.value) {\n    return getFeatureVisibility('mouth');\n  }\n  return getFeatureVisibility('mouth');\n});\nconst showLeftEye = computed(() => {\n  if (gameOver.value && !won.value) {\n    return getFeatureVisibility('leftEye');\n  }\n  return getFeatureVisibility('leftEye');\n});\nconst showRightEye = computed(() => {\n  if (gameOver.value && !won.value) {\n    return getFeatureVisibility('rightEye');\n  }\n  return getFeatureVisibility('rightEye');\n});\nconst showNose = computed(() => getFeatureVisibility('nose'));\n\n// Display da palavra atual com letras adivinhadas\nconst displayedWord = computed(() => {\n  if (!currentWord.value) return [];\n  return currentWord.value.word.split('').map(letter => \n    guessedLetters.value.includes(letter.toUpperCase()) ? letter : '_'\n  );\n});\n\nfunction handleLivesChange(e) {\n  maxLives.value = parseInt(e.target.value);\n  startGame();\n}\n\nfunction startGame() {\n  const filteredWords = vocabularyStore.filteredWords;\n  if (filteredWords.length === 0) {\n    alert('Nenhuma palavra encontrada com os critérios selecionados.');\n    return;\n  }\n\n  currentWord.value = filteredWords[Math.floor(Math.random() * filteredWords.length)];\n  guessedLetters.value = [];\n  guess.value = '';\n  message.value = '';\n  gameStarted.value = true;\n  showRestart.value = false;\n  lives.value = maxLives.value;\n  gameOver.value = false;\n  won.value = false;\n  pointsEarned.value = 0;\n  score.value = 0;\n}\n\nasync function makeGuess() {\n  if (!guess.value || gameOver.value) return;\n\n  const letter = guess.value.toUpperCase();\n  guess.value = '';\n\n  if (guessedLetters.value.includes(letter)) {\n    message.value = 'Você já tentou essa letra!';\n    return;\n  }\n\n  guessedLetters.value.push(letter);\n\n  if (!currentWord.value.word.toUpperCase().includes(letter)) {\n    lives.value--;\n    message.value = `Letra \"${letter}\" não encontrada. ${lives.value} tentativas restantes.`;\n    \n    if (lives.value === 0) {\n      await handleGameOver(false);\n    }\n  } else {\n    message.value = `Boa! A letra \"${letter}\" existe na palavra.`;\n    score.value += 2;\n    \n    // Verifica se a palavra está completa\n    if (displayedWord.value.join('') === currentWord.value.word) {\n      await handleGameOver(true);\n    }\n  }\n}\n\nfunction calculatePoints() {\n  // Points for winning\n  let points = POINTS_CONFIG.GAME_COMPLETION;\n  \n  // Points for remaining lives (2 points per life)\n  points += lives.value * 2;\n  \n  // Perfect score bonus (no mistakes)\n  if (lives.value === maxLives.value) {\n    points += POINTS_CONFIG.PERFECT_SCORE;\n  }\n}\n\nasync function handleGameOver(hasWon) {\n  gameOver.value = true;\n  showRestart.value = true;\n  won.value = hasWon;\n\n  if (hasWon) {\n    message.value = 'Parabéns! Você venceu!';\n    const points = calculatePoints();\n    await awardPoints(points);\n    pointsEarned.value = points;\n  } else {\n    message.value = `Game Over! A palavra era: ${currentWord.value.word}`;\n  }\n}\n\nasync function handlePerk(perkId) {\n  const success = await usePerk(perkId);\n  if (!success) return;\n  if (perkId === 'hint' && currentWord.value && !gameOver.value) {\n    // Encontra uma letra não revelada\n    const word = currentWord.value.word.toUpperCase();\n    const unrevealedLetters = word\n      .split('')\n      .filter(letter => !guessedLetters.value.includes(letter));\n    if (unrevealedLetters.length > 0) {\n      // Revela uma letra não revelada aleatória\n      const letter = unrevealedLetters[Math.floor(Math.random() * unrevealedLetters.length)];\n      guessedLetters.value.push(letter);\n      message.value = `Dica: A letra \"${letter}\" existe na palavra.`;\n      // Verifica se a palavra está completa após a dica\n      if (displayedWord.value.join('') === currentWord.value.word) {\n        handleGameOver(true);\n      }\n    }\n  }\n}\n\n// Inicia o jogo ao montar\nonMounted(() => {\n  startGame();\n});\n</script>\n\n<style scoped>\n.game-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n}\n\n.game-settings {\n  min-width: 300px;\n  padding: var(--spacing-md);\n}\n\n.game-settings h3 {\n  margin-bottom: var(--spacing-md);\n  color: var(--text-color);\n}\n\n.setting-group {\n  margin-bottom: var(--spacing-md);\n}\n\n.setting-group label {\n  display: block;\n  margin-bottom: var(--spacing-sm);\n  color: var(--text-secondary);\n  font-weight: 500;\n}\n\n.setting-description {\n  font-size: 0.9rem;\n  color: var(--text-secondary);\n  margin-top: var(--spacing-xs);\n}\n\n/* .game-container {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  width: 100%;\n  justify-content: center;\n  flex-direction: column;\n} */\n\n.hangman-figure {\n  margin-bottom: 2rem;\n}\n\n.word-container {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n  flex-wrap: wrap;\n}\n\n.word-container .letter {\n  border-bottom: 2px solid var(--secondary-color);\n  width: 2rem;\n  height: 2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n\n.clue-container {\n  margin: 1rem;\n  font-size: 1.125rem;\n  border: 2px solid #333;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.message-container {\n  text-align: center;\n  margin-bottom: 1rem;\n  min-height: 1.5rem;\n  color: var(--text-secondary);\n}\n\n.guess-container {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  align-items: center;\n  padding: 20px;\n  margin-bottom: 1rem;\n}\n\n.guess-container input {\n  width: 3rem;\n  height: 3rem;\n  font-size: 1.5rem;\n  text-align: center;\n  text-transform: uppercase;\n  border: 2px solid var(--border-color);\n  border-radius: 4px;\n}\n\n.guess-container button {\n  padding: 0.5rem 1rem;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.guess-container button:hover:not(:disabled) {\n  background-color: var(--secondary-color);\n}\n\n#restart-btn {\n  padding: 0.5rem 1rem;\n  background-color: var(--accent-color);\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n#restart-btn:hover {\n  background-color: var(--secondary-color);\n}\n\n.completion-message {\n  margin-top: var(--spacing-md);\n  text-align: center;\n  padding: var(--spacing-md);\n  background-color: var(--surface-color);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n}\n\n:deep(.dark) .completion-message {\n  background-color: var(--dark-surface-color);\n  border-color: var(--dark-border-color);\n}\n\n/* Responsivo */\n@media (max-width: 768px) {\n  /* .game-container {\n    flex-direction: column;\n  } */\n\n  .word-container .letter {\n    width: 1.5rem;\n    height: 1.5rem;\n    font-size: 1rem;\n  }\n\n  .guess-container input,\n  .guess-container button,\n  #restart-btn {\n    max-width: 200px;\n  }\n}\n</style>\n"],"names":["loading","ref","score","vocabularyStore","useVocabularyStore","POINTS_CONFIG","awardPoints","useGamePoints","currentWord","guessedLetters","guess","message","gameStarted","showRestart","maxLives","lives","value","gameOver","won","pointsEarned","getFeatureVisibility","feature","livesConfig","head","body","leftArm","rightArm","leftLeg","rightLeg","mouth","leftEye","rightEye","nose","showHead","computed","showBody","showLeftArm","showRightArm","showLeftLeg","showRightLeg","showMouth","showLeftEye","showRightEye","showNose","displayedWord","word","split","map","letter","includes","toUpperCase","handleLivesChange","e","parseInt","target","startGame","filteredWords","length","Math","floor","random","alert","async","makeGuess","push","join","handleGameOver","hasWon","points","GAME_COMPLETION","PERFECT_SCORE","calculatePoints","onMounted"],"mappings":"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"}