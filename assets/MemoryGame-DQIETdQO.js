import{u as a,G as e}from"./GameContainer-Cx9z9Rey.js";import{_ as l,s as u,u as s,w as t,c as o,l as n,h as r,e as i,g as v,m as d,p as c,n as p,k as m,r as f,a as h,d as g,f as w,t as b,F as k,j as _,q as C}from"./index-DCpJmo-T.js";import{u as y}from"./SelectorsComponent-kxMDd0Sf.js";const j={class:"card-front"},T={class:"card-back"},M=l({__name:"GameCardFlip",props:{flipped:{type:Boolean,default:!1},matched:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},emits:["click"],setup(a,{emit:e}){const l=a,f=e,h=u(l.flipped),g=u(l.matched),w=s(),b=u(w.isDarkMode);t((()=>l.flipped),(a=>{h.value=a}),{flush:"post"}),t((()=>l.matched),(a=>{g.value=a}),{flush:"post"});const k=o((()=>({flipped:h.value,matched:g.value,dark:b.value}))),_=o((()=>({transform:g.value?"scale(0.95)":void 0,willChange:h.value?"transform":void 0}))),C=o((()=>({transform:h.value?"rotateY(180deg)":void 0})));return(e,l)=>{const u=n("font-awesome-icon");return i(),r("div",{class:m(["card",k.value]),style:p(_.value),onClick:l[0]||(l[0]=e=>!a.disabled&&f("click"))},[v("div",{class:"card-inner",style:p(C.value)},[v("div",j,[d(e.$slots,"front",{},(()=>[c(u,{icon:["fas","question"],size:"2x"})]))]),v("div",T,[d(e.$slots,"back",{},void 0)])],4)],6)}}},[["__scopeId","data-v-843b71fd"]]),q={class:"game-settings"},I={class:"setting-group"},x=["value"],G={class:"setting-description"},P={class:"game-content"},S={id:"definition"},$={id:"game-board"},z=l({__name:"MemoryGame",setup(l){const u=f(!1),s=y();a();const t=f(0),o=f([]),n=f(null),d=f([]),c=f([]),p=f(0),m=f(null),j=f(null),T=f(null),z=f([]),B=f(2),D=f(8),E=f(140);function F(a){D.value=parseInt(a.target.value),N()}function N(){t.value=0,p.value=0,z.value=[],B.value=2,m.value=null,j.value=null,T.value=null;let a=s.words.filter((a=>a.isActive));if(a.length<2)return void alert("Não há palavras suficientes para iniciar o jogo. Por favor, ajuste os filtros.");a.sort((()=>Math.random()-.5)),d.value=a.slice(0,D.value),c.value=[...d.value],V();const e=[...d.value,...d.value].map((a=>({word:a.word,flipped:!1,matched:!1})));e.sort((()=>Math.random()-.5)),o.value=e}function V(){0===c.value.length?n.value=null:(c.value.sort((()=>Math.random()-.5)),n.value=c.value.pop())}function A(){const a=o.value[m.value],e=o.value[j.value];if(2===B.value)a.word===n.value.word&&e.word===n.value.word?(a.matched=!0,e.matched=!0,z.value.push(a,e),O(),z.value.length===o.value.length?setTimeout((()=>{alert(`Parabéns! Você encontrou todos os pares com ${t.value} cliques.`),N()}),500):setTimeout((()=>{V()}),500)):setTimeout((()=>{J()}),1e3);else{const l=o.value[T.value],u=n.value.word;let s=0;a.word===u&&s++,e.word===u&&s++,l.word===u&&s++,s>=2?([a,e,l].forEach((a=>{a.word===u&&(a.matched=!0)})),z.value.push(...[a,e,l].filter((a=>a.word===u))),O(),B.value=2,z.value.length===o.value.length?setTimeout((()=>{alert(`Parabéns! Você encontrou todos os pares com ${t.value} cliques.`),N()}),500):setTimeout((()=>{V()}),500)):setTimeout((()=>{J(),B.value=2}),1e3)}}function J(){null!==m.value&&(o.value[m.value].flipped=!1),null!==j.value&&(o.value[j.value].flipped=!1),null!==T.value&&(o.value[T.value].flipped=!1),O()}function O(){p.value=0,m.value=null,j.value=null,T.value=null}return h((()=>{N()})),(a,l)=>(i(),g(e,{title:"Jogo da Memória",gameInstructions:"Encontre os pares de palavras correspondentes!\n- Clique em uma carta para revelar a palavra\n- Combine a palavra com sua definição mostrada acima\n- Use o perk 'hint' para revelar um par de cartas\n- O perk 'open_third_card' permite abrir três cartas simultaneamente",loading:u.value,score:t.value,availablePerks:["hint","open_third_card"],onSpecialtyChange:N,onDifficultyChange:N},{"game-settings":w((()=>[v("div",q,[l[1]||(l[1]=v("h3",null,"Configurações",-1)),v("div",I,[l[0]||(l[0]=v("label",null,"Número de pares",-1)),v("input",{type:"range",value:D.value,min:"8",max:"40",step:"4",onInput:F},null,40,x),v("p",G,"Quantidade de pares de palavras no jogo ("+b(D.value)+" pares)",1)])])])),default:w((()=>[v("div",P,[v("p",S,b(n.value?n.value.clue:"Todas as palavras foram encontradas!"),1),v("div",$,[(i(!0),r(k,null,_(o.value,((a,e)=>(i(),g(M,{key:e,flipped:a.flipped,matched:a.matched,disabled:p.value>=B.value,cardSize:E.value,onClick:a=>function(a){const e=o.value[a];e.flipped||e.matched||(e.flipped=!0,t.value++,0===p.value?(m.value=a,p.value=1):1===p.value?(j.value=a,p.value=2,2===B.value&&A()):2===p.value&&3===B.value&&(T.value=a,p.value=3,A()))}(e)},{back:w((()=>[C(b(a.word),1)])),_:2},1032,["flipped","matched","disabled","cardSize","onClick"])))),128))])])])),_:1},8,["loading","score"]))}},[["__scopeId","data-v-60ac2254"]]);export{z as default};
//# sourceMappingURL=MemoryGame-DQIETdQO.js.map
